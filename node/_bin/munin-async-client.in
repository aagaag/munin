#! @@PERL@@
# -*- cperl -*-
#
# Copyright (C) 2010 Steve Schnepp
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#

use strict;
use warnings;

use Sys::Hostname;
use Data::Dumper;
use Getopt::Long;
use Pod::Usage;

# Disable buffering
$| = 1;

my $SPOOLDIR = "/tmp/munin-async-spool";
my $hostname = hostname();
chomp($hostname);
my $verbose;
my $debug;
my $help;

GetOptions(
        "spooldir|s=s" => \$SPOOLDIR,
        "hostname|h=s" => \$hostname,

        "help|h" => \$help,
        "verbose|v" => \$verbose,
        "debug" => \$debug,
) or pod2usage(1);
if ($help) {
        pod2usage(1);
}



# Use STDIN/STDOUT, in order to be : 
# 1. secure over internet (SSH), munin-node needs only 
#    to listen on localhost:4949
# 2. very simple to launch

die "spooldir [$SPOOLDIR] not found" unless -d $SPOOLDIR;

print "# munin node at $hostname\n";

while (my $line = <>) {
	if ($line =~ m/^list/) {
		cat_file("$SPOOLDIR/munin-daemon.list");
		print ".\n";
	} elsif ($line =~ m/^config (\w+)/) {
		cat_file("$SPOOLDIR/munin-daemon.$1.config");
		print ".\n";
	} elsif ($line =~ m/^fetch (\w+)/) {
		# Fetching all values since last time
		cat_file("$SPOOLDIR/munin-daemon.$1.data");
		print ".\n";
		# XXX - there is a race condition here
		unlink("$SPOOLDIR/munin-daemon.$1.data"); 
	} elsif ($line =~ m/^spoolfetch (\d+)/) {
		my $last_epoch = $1; # XXX - We don't care about the last_epoch for now
		my @plugins = get_spooled_plugins();
		foreach my $plugin (@plugins) {
			cat_multigraph_file($plugin);
		}
		print ".\n";
	} elsif ($line =~ m/^cap/) {
		print "cap spool\n";
	} elsif ($line =~ m/^quit/) {
		exit;
	} else {
		print "# Unknown command.\n";
	}
}

sub cat_file {
	my $filename = shift;
	return if ! -r $filename;
	
	open(FILE, "$filename");
	while(<FILE>) { 
		# remove line starting with .
		next if m/^\./;
		print $_; 
	}
	close(FILE);
}

sub cat_multigraph_file {
	my $plugin = shift;

	open(DATAFILE, "$SPOOLDIR/munin-daemon.$plugin.data");
	my ($last_epoch, $epoch) = (0, 0);
	while(my $line = <DATAFILE>) {
		if ($line =~ m/\w+ (\d+):/) {
			$epoch = $1;
		}

		# emit multigraph line only when epoch changes
		if ($epoch != $last_epoch) {
			$last_epoch = $epoch;
			print "multigraph $plugin\n";
			# Sending config
			cat_file("$SPOOLDIR/munin-daemon.$plugin.config");
		} 
		# Sending value
		print $line;
	}
	close(DATAFILE);
}

sub get_spooled_plugins {
	print STDERR "get_spooled_plugins\n" if $verbose;
	my @plugins;
	opendir(SPOOLDIR, $SPOOLDIR) or die "can't opendir $SPOOLDIR: $!";
	while(my $filename = readdir(SPOOLDIR)) {
		print STDERR $filename if $verbose;
		next unless $filename =~ m/^munin-daemon\.(\w+)\.data$/;
		push @plugins, $1;	
	}
	closedir(SPOOLDIR);

	print STDERR "plugins:@plugins\n" if $verbose;

	return @plugins;
}

__END__

=head1 NAME

munin-async-client - A program to replay spooled munin-node calls

=head1 SYNOPSIS

munin-async-client [options]

 Options:
     -s --spool <spooldir>      Store the spooled data in this dir [/tmp/munin-async-spool]

     -v --verbose               Be verbose
     -h --help                  View this message	
