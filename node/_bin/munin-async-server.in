#! @@PERL@@
# -*- cperl -*-
#
# Copyright (C) 2010 Steve Schnepp
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# $Id$

use strict;
use warnings;

use IO::Socket;
use IO::File;
use File::Path qw(make_path);
use Getopt::Long;
use Pod::Usage;

use Munin::Node::SpoolWriter;

my $host = "localhost:4949";
my $SPOOLDIR = "/tmp/munin-async-spool";
my $verbose;
my $debug;
my $help;

GetOptions(
	"host=s" => \$host,
	"spooldir|s=s" => \$SPOOLDIR,

	"help|h" => \$help,
	"verbose|v" => \$verbose,
	"debug" => \$debug,
) or pod2usage(1);
if ($help) {
	pod2usage(1);
}

unless (-d $SPOOLDIR) {
	make_path($SPOOLDIR, { verbose => $verbose, } ) 
		or die ("Cannot create '$SPOOLDIR': $!");
}

my $spoolwriter = Munin::Node::SpoolWriter->new(
	spooldir => $SPOOLDIR,
);


# Read whole configuration
my @plugins;
my %plugins_rate;
{
	print STDERR "Reading config from $host\n" if $verbose;
	my $sock = new IO::Socket::INET( 
		PeerAddr	=> "$host", 
		Proto	=> 'tcp'
	) || die "Error creating socket: $!"; 

	print $sock "list\n";
	<$sock>; # Read the first header comment line
	my $plugins_line = <$sock>;
	chomp($plugins_line);

	{
		my $fh_list = IO::File->new(
			"$SPOOLDIR/munin-daemon.list",
			"w",
		);
	
		print $fh_list $plugins_line;
		print $fh_list "\n";
	}

	@plugins = split(/ /, $plugins_line);

	# Ask for config & search update_rate for each plugins
	foreach my $plugin (@plugins) {
		print STDERR "Asking config for $plugin\n" if $verbose;
		$plugins_rate{$plugin} = 300; # default : 5 min
		print $sock "config $plugin\n";
		open (OUTFILE, "> $SPOOLDIR/munin-daemon.$plugin.config");
		while(my $line = <$sock>) {
			print OUTFILE $line;
			if ($line =~ m/^update_rate (\d+)/) {
				# The plugin has a special update_rate: overriding it
				# XXX - Doesn't take into account a per field update_rate
				$plugins_rate{$plugin} = $1;
			}
			if ($line =~ m/^\./) {
				# Starting with . => end
				last;
			}
		}
		close (OUTFILE);
	}
}

# Q&D child collection
$SIG{CHLD} = sub { wait; };

# now, update regularly...
# ... but each plugin in its own process to avoid delay-leaking
my %last_updated;
MAIN: while(1) { 
	my $when = time;
	PLUGIN: foreach my $plugin (@plugins) {
		# See if this plugin should be updated
		my $plugin_rate = $plugins_rate{$plugin} || 300;
		if ($when < ($last_updated{$plugin} || 0) + $plugin_rate) {
			# not yet, next plugin
			next;
		}

		# Should update it
		$last_updated{$plugin} = $when;
		if (fork()) {
			# parent, return directly	
			next PLUGIN;
		}
		
		print STDERR "[$$][$plugin] asking for data\n" if $debug;

		# Setting the command name for a useful top information
		$0 = "munin-async-server [$plugin]";

		fetch_data($plugin, $when);

		# We end here
		last MAIN;
	}

	# Sleep for 1s.
	sleep 1; 
}

print STDERR "[$$] Exiting\n" if $debug;

sub fetch_data
{
	my $plugin = shift;
	my $when = shift;

		my $sock = new IO::Socket::INET( 
			PeerAddr	=> "$host", 
			Proto	=> 'tcp'
		) || die "Error creating socket: $!"; 
		<$sock>; # skip header

		print $sock "fetch $plugin\n";
		
		my $fh_data = IO::File->new("$SPOOLDIR/munin-daemon.$plugin.data", "a+");
		while(my $line = <$sock>) {
			print STDERR "[sock] $line" if $debug;
			if ($line =~ m/^\./) {
				# Starting with . => end
				last;
			}

			if ($line =~ m/^(\w+)\.value (\d+):(-?\d+\.?\d*)/) {
				# the plugin already outputed a time
				# keeping it
				print $fh_data "$1.value $2:$3\n";
				print STDERR "[$plugin] $1.value $2:$3\n" if $debug;
			} elsif ($line =~ m/^(\w+)\.value (-?\d+\.?\d*)/) {
				# the plugin doesn't ouput a time, 
				# using now()
				print $fh_data "$1.value $when:$2\n";
				print STDERR "[$plugin] $1.value $when:$2\n" if $debug;
			}
		}
}

__END__

=head1 NAME

munin-async-server - A program to spool munin-node calls

=head1 SYNOPSIS

munin-async-server [options]

 Options:
     --host <hostname:port>     Connect to this munin-node [localhost:4949]
     -s --spool <spooldir>      Store the spooled data in this dir [/tmp/munin-async-spool]

     -v --verbose               Be verbose
     -h --help                  View this message	
