#!/usr/bin/perl -w
# -*- perl -*-
#
# Copyright (C) 2003-2006 Jimmy Olsen, Nicolai Langfeldt.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Program to suggest what plugins to use and not

$| = 1; # Flush after every write to stdout

use strict;
use warnings;

use Getopt::Long;
# use Data::Dumper;

use Munin::Node::Config;
use Munin::Common::Defaults;

my $config = Munin::Node::Config->instance();

my $bindir     = $Munin::Common::Defaults::MUNIN_SBINDIR;

my $installed  = undef;
my $plugins    = undef;

my @all_families     = ("auto", "manual", "contrib");
my @default_families = ("auto");

my $debugopt   = '--debug'; # Pass --debug to children or not
my @errors     = ();


sub parse_args
{
	my $conffile   = "$Munin::Common::Defaults::MUNIN_CONFDIR/munin-node.conf";
	my $servicedir = "$Munin::Common::Defaults::MUNIN_CONFDIR/plugins";
	my $libdir     = "$Munin::Common::Defaults::MUNIN_LIBDIR/plugins";

	my $debug      = 0;

	my $suggest    = 0;
	my $shell      = 0;
	my $removes    = 0;
	my $newer      = undef;
	my $exiterror  = 1;

	my @families   = ();

	my @snmp       = ();
	my $snmpver    = undef;
	my $snmpcomm   = undef;

	print_usage_and_exit() unless GetOptions(
		"help"            => \&print_usage_and_exit,
		"shell!"          => \$shell,
		"exitnoterror!"   => \$exiterror,
		"debug!"          => \$debug,
		"suggest!"        => \$suggest,
		"config=s"        => \$conffile,
		"servicedir=s"    => \$servicedir,
		"remove-also!"    => \$removes,
		"libdir=s"        => \$libdir,
		"families=s"      => \@families,
		"version!"        => \&print_version_and_exit,
		"snmp=s"          => \@snmp,
		"snmpversion=s"   => \$snmpver,
		"snmpcommunity=s" => \$snmpcomm,
		"newer=s"         => \$newer
	);

	if (defined $newer and (!$shell or $removes)) {
	    print STDERR "Fatal: --newer only supported along with --shell.\n";
	    exit 2;
	}

	if (@families) {
	    @families = split /,/, $families[0];
	} else {
	    if (@snmp) {
		@families = ();
		$shell=1;
	    }
	    elsif ($suggest or $shell) {
		@families = @default_families;
	    }
	    else {
		@families = @all_families;
	    }
	}

	# Normalize input in case it was taken from commandline?
	# This seems like a noop no matter what went before.
	# @families = split (/,/, join (',', @families));
	# @snmp = split (/,/, join (',', @snmp));

	if (@snmp and !$shell) {
	    print STDERR "Fatal: --snmp only supported along with --shell.\n";
	    exit 3;
	}

	$config->reinitialize({
		newer => $newer,
		shell => $shell,
		exit_not_error => $exiterror,
		suggest => $suggest,
		remove_also => $removes,

		families => \@families,

		conffile => $conffile,
		servicedir => $servicedir,
		libdir => $libdir,

		snmp => \@snmp,
		snmp_version => $snmpver,
		snmp_community => $snmpcomm,

		DEBUG => $debug,
	});

	exit 0; # FIXME :-)
}


sub print_usage_and_exit
{

	my $all_families = join(', ', @all_families);
	my $default_families = join(', ', @default_families);

	print qq{Usage: $0 [options]

Options:
	--help			View this help page
	--version		Show version information
	--debug			View debug information (very verbose)
	--config <file>         Override configuration file
	                        [$config]
	--servicedir <dir>	Override plugin directory
	                        [$Munin::Common::Defaults::MUNIN_CONFDIR/plugins]
	--libdir <dir>		Override plugin lib
	                        [$Munin::Common::Defaults::MUNIN_LIBDIR/plugins]
	--families <family,...>	Override families ($all_families) [$default_families]
	--suggest		Show suggestions instead of status
	--shell			Show shell commands (implies --suggest)
        --exitnoterror          Do not consider non-zero exit-value as error
	--remove-also		Also show rm-commands when doing --shell
	--newer <version>	Only show suggestions related to plugins newer
	                        than version <version>. [0.0.0]
	--snmp <host|cidr>      Do SNMP probing on the host or CIDR network.
	--snmpversion <ver>     Set SNMP version (1, 2c or 3) [2c]
	--snmpcommunity <comm>  Set SNMP community string [public]

By default this program shows which plugins are activated on the system.

If you specify --suggest it will present a table of plugins that will
probably work (according to the plugins autoconf command).

If you specify --shell shell commands to install those same plugins
will be printed. These can be reviewed or piped directly into a shell to
install the plugins.

};

	exit 0;
}


sub print_version_and_exit
{

    print qq{munin-node-configure (munin-node) version $Munin::Common::Defaults::MUNIN_VERSION.
Written by Jimmy Olsen

Copyright (C) 2003-2006 Jimmy Olsen

This is free software released under the GNU General Public License. There
is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. For details, please refer to the file COPYING that is included
with this software or refer to
  http://www.fsf.org/licensing/licenses/gpl.txt
};
    exit 0;

}


### current end of function definitions
parse_args();

if (@{ $config->{families} })
{
    $plugins   = &get_plugins   ($plugins  , $config->{libdir});
    $installed = &get_installed ($installed, $config->{servicedir});

    if (! $config->{shell} and $config->{suggest})
    {
	&normal ("Plugin", "Used", "Suggestions");
	&normal ("------", "----", "-----------");
    }
    elsif (! $config->{shell})
    {
	&normal ("Plugin", "Used", "Extra information");
	&normal ("------", "----", "-----------------");
    }

    foreach my $plug (sort keys %{$plugins})
    {
	next unless defined $plugins->{$plug}->{'family'};
	next unless (grep (/^$plugins->{$plug}->{'family'}$/ ,@{ $config->{families} }));

	my $now   = (exists $installed->{$plug}?"yes":"no");
	my $want  = (exists $plugins->{$plug}->{'default'}?$plugins->{$plug}->{'default'}:"no");
	my $snow  = (exists $installed->{$plug}->{'suggest'}?$installed->{$plug}->{'suggest'}:undef);
	my $swant = (exists $plugins->{$plug}->{'suggest'}?$plugins->{$plug}->{'suggest'}:undef);
	my $sugg  = "";


	if ($config->{shell})
	{
	    if ($plug =~ /_$/) # Wildcard plugin...
	    {
		if ($now eq "yes" and $want eq "no")
		{
		    if ($snow and @{$snow})
		    {
			foreach my $wild (sort @{$snow})
			{
			    &link_remove ("$plug$wild");
			}
		    }
		}
		else
		{
		    if ($snow and @{$snow})
		    {
			foreach my $wild (sort @{$snow})
			{
			    if (! grep (/^$wild$/, @{$swant}))
			    {
				&link_remove ("$plug$wild");
			    }
			}
		    }
		    if ($swant and @{$swant})
		    {
			foreach my $wild (sort @{$swant})
			{
			    next if -e "$config->{servicedir}/$plug"."_".$wild; # None of our business...
			    if (! grep (/^$wild$/, @{$snow}))
			    {
				&link_add ($plug, $wild);
			    }
			}
		    }
		}
	    }
	    else
	    {
		if ($now eq "yes" and $want eq "no")
		{
		    &link_remove ($plug);
		}
		elsif ($now eq "no" and $want eq "yes")
		{
		    next if -e "$config->{servicedir}/$plug"; # None of our business...
		    &link_add ($plug);
		}
	    }
	}
	elsif ($config->{suggest})
	{
	    if ($plug =~ /_$/) # Wildcard plugin...
	    {
		if ($now eq "yes" && $want eq "no" or
			$now eq "no" && $want eq "yes" && $swant && @{$swant})
		{
		    $sugg = "$want ";
		}
		if ($snow and @{$snow})
		{
		    foreach my $wild (sort @{$snow})
		    {
			if (! grep (/^$wild$/, @{$swant}))
			{
			    $sugg .= "-$wild ";
			}
		    }
		}
		if ($swant and @{$swant})
		{
		    foreach my $wild (sort @{$swant})
		    {
			next if -e "$config->{servicedir}/$plug"."_".$wild; # None of our business...
			if (! grep (/^$wild$/, @{$snow}))
			{
			    $sugg .= "+$wild ";
			}
		    }
		}
		&normal ($plug, $now, $sugg);
	    }
	    else
	    {
		next if -e "$config->{servicedir}/$plug"; # None of our business...
		if ($now ne $want)
		{
		    $sugg = $want;
		}
		elsif (defined $plugins->{$plug}->{'defaultreason'} and
			$plugins->{$plug}->{'defaultreason'} =~ /^[^\(]*\((.+)\)\s*$/)
		{
		    $sugg = "[$1]";
		}

		&normal ($plug, $now, $sugg);
	    }
	}
	else
	{
	    if ($plug =~ /_$/) # Wildcard plugin...
	    {
		if ($snow and @{$snow})
		{
		    $sugg = join ' ', @{$snow};
		}
		&normal ($plug, $now, $sugg);
	    }
	    else
	    {
		&normal ($plug, $now, "");
	    }
	}
    }
}


if (@{ $config->{snmp} } and $config->{shell})
{
    if (-x "$bindir/munin-node-configure-snmp")
    {
	if (eval "require Net::SNMP;")
	{
	    my @params;
	    push (@params, "$bindir/munin-node-configure-snmp");
	    push (@params, "--snmpversion", $config->{snmp_version}) if defined $config->{snmpver};
	    push (@params, "--community", $config->{snmp_community}) if defined $config->{snmp_community};
	    push (@params, $debugopt) if $config->{DEBUG};
	    push (@params, @{ $config->{snmp} });
	    print "# executing: ",join(' ',@params),"\n" if $config->{DEBUG};
	    exec (@params);
	    # NOTREACHED
	}
	else
	{
	    print STDERR "# ERROR: Cannot perform SNMP probe. SNMP operations require the perl module\n";
	    print STDERR "# Net::SNMP, which is currently not installed (or not in one of the following\n";
	    print STDERR "# directories: @INC\n";
	}
    }
    else
    {
	print STDERR "# ERROR: Cannot perform SNMP probe. SNMP operations require the SNMP part\n";
	print STDERR "# of Munin to be installed, which is currently not installed, or not in the \n";
	print STDERR "# rigt directory: $bindir\n";
    }
}

if (@errors) {
    print STDERR "# There were some errors:\n";
    print STDERR "# ",join("\n# ",@errors),"\n";

    exit 1;
}


### XXX functions start here XXX

sub link_remove
{
    my $plug = shift;

    return unless $config->{remove_also};
    return unless (-l "$config->{servicedir}/$plug"); # Strange...

    print "rm -f $config->{servicedir}/$plug\n";
}


sub link_add
{
	my $plug = shift;
	my $wild = shift || '';
	print "ln -s $config->{libdir}/$plug $config->{servicedir}/$plug$wild\n";
}


sub normal
{
    printf ("%-26s | %-4s | %-39s\n", @_);
}


sub get_installed {
	(my $ps, my $dir) = @_;

	print "# Opening \"$dir\" for reading...\n" if $config->{DEBUG};
	opendir (DIR, $dir) or die "Could not open \"$dir\" for reading: $!\n";
	my @installed = readdir (DIR);
	print "# Found ",scalar(@installed)," files\n" if $config->{DEBUG};
	close (DIR);

	foreach my $inst (@installed) {
		my $realfile = undef;

		next unless -l "$dir/$inst"; # None of our business...
		next unless ($realfile = readlink ("$dir/$inst"));
		next unless ($realfile =~ /^$config->{libdir}\//); # None of our business...
		$realfile =~ s/^.+\///;

		print "# Checking file: $inst..." if $config->{DEBUG};
		if ($realfile =~ /_$/) # Wildcard plugin...
		{
		    print "# $realfile..." if $config->{DEBUG};
		    (my $wild = $inst) =~ s/^$realfile//;
		    print "# $wild..." if $config->{DEBUG};
		    push @{$ps->{$realfile}->{'suggest'}}, $wild;
		}
		$ps->{$realfile}->{'installed'} = "yes";

		print "\n" if $config->{DEBUG};
	}

	return $ps;
}


sub get_plugins {
    (my $ps, my $dir) = @_;
    my %versions = ();

    if (defined $config->{newer} and -f "$dir/plugins.history") {
	if (open (HIST, "$dir/plugins.history")) {
	    my @slurp = <HIST>;
	    my $reached_version = 0;
	    my $ver = "0.0.0";
	    close (HIST);
	    my $uname = lc `uname`;
	    chomp $uname;

	    foreach my $line (@slurp) {
		chomp $line;
		$line =~ s/#.*//g;
		$line =~ s/^\s+//g;
		$line =~ s/\s+$//g;
		next unless $line =~ /\S/;

		if ($line =~ /^\[([^\]]+)\]$/) {
		    $ver = $1;
		    print "# Setting version to \"$ver\".\n" if $config->{DEBUG};
		    if ($ver eq $config->{newer}) {
			$reached_version = 1;
		    } elsif ($reached_version) {
			$reached_version++;
		    }
		} elsif ($reached_version < 2) {
		    next;
		} elsif ($line =~ /^([^\/]+)\/(.+)$/) {
		    if ($uname eq $1) {
			$ps->{$2}->{'version'} = $ver;
			print "# - Adding plugin '$2' to version tree ",
			  "($ver)...\n" if $config->{DEBUG};
		    }
		} elsif ($line =~ /^(.+)$/) {
		    $ps->{$1}->{'version'} = $ver;
		    print "# - Adding plugin \"$1\" to version tree ",
		      "($ver)...\n" if $config->{DEBUG};
		}
	    }
	} else {
	    warn "Warning: Could not open \"$dir/plugins.history\": $!\n";
	}
    }

    print "# Opening \"$dir\" for reading...\n" if $config->{DEBUG};
    opendir (DIR, $dir) or die "Could not open \"$dir\" for reading: $!\n";
    my @plugins = readdir (DIR);
    print "# Found ",scalar(@plugins)," files\n" if $config->{DEBUG};
    close (DIR);

    foreach my $plug (@plugins) {
	my $path = "$dir/$plug";
	next if $plug =~ /^\./;
	print "# Considering $dir/$plug for checking\n" if $config->{DEBUG};
	# If anyone ever uses a relative symlink this will break so bad
	$path = readlink($path) and
	  $path = $path =~ /^\// ? $path : "$dir/$path"
	    while -l $path;
	if (!-f $path) {
	    print "# File is not a file\n" if $config->{DEBUG};
	    next;
	}
	if (!-x _) {
	    print "# File is not executable\n" if $config->{DEBUG};
	    next;
	}
	if ($plug =~ /~$/    or # Emacs droppings
	    $plug =~ /.bak$/ or # Backup file
	    $plug =~ /.swp$/) { # Vi droppings
	    print "# File is a backup/leftover file\n" if $config->{DEBUG};
	    next;
	}

	$ps->{$plug}->{'family'} = "contrib"; # Set default family...

	print "# Checking plugin: $plug..." if $config->{DEBUG};
	if (! open (FILE, "$dir/$plug")) {
	    warn "WARNING: Could not open file '$dir/$plug' for reading $!.".
	      "Skipping.\n";
	    next;
	}
	while (<FILE>) {
	    chomp;
	    if (/#%#\s+family\s*=\s*(\S+)\s*$/) {
		$ps->{$plug}->{'family'} = $1;
		print "# $1..." if $config->{DEBUG};
	    } elsif (/#%#\s+capabilities\s*=\s*(.+)$/) {
		foreach my $cap (split (/\s+/, $1)) {
		    $ps->{$plug}->{'capability'}->{$cap} = 1;
		    print "# $cap..." if $config->{DEBUG};
		}
	    }
	}
	close (FILE);

	unless (grep (/^$ps->{$plug}->{'family'}$/, @{ $config->{families} })) {
	    print "\n" if $config->{DEBUG};
	    next;
	}
	if ($ps->{$plug}->{'family'} eq "auto" and defined $config->{newer} and
	    !defined $ps->{$plug}->{'version'}) {
	    print "\n" if $config->{DEBUG};
	    next;
	}


	if ($ps->{$plug}->{'capability'}->{'autoconf'}) {

	    my $gotjunk=0;  # Seen junk?

	    my @cmd=("$bindir/munin-run");
	    push(@cmd,$debugopt) if $config->{DEBUG};
	    push(@cmd,"--servicedir",$config->{libdir}, $plug, "autoconf");

	    print "\n# Running: ",join(' ',@cmd),"\n" if $config->{DEBUG};

	    my $fork = open (PLUG, "-|");

	    if ($fork == -1) {
		die "ERROR: Unable to fork: $!\n"
	    } elsif ($fork == 0) { # Child
		close (STDERR);
		open (STDERR, ">&STDOUT");
		exec (@cmd);
	    } else {
		# The join map we used here before was somehow
		# fragile.  This construct is possible to
		# debug.

		my @pr = ();	# Plugin response

		# IFF the plugin exits with non-zero exit code we will
		# not use it no matter what. Instead we report it as
		# an error.  This is to be able to tell a error free
		# execution from a erronous one.
		#
		# Also, if the plugin outputs junk we handle that as
		# an error.

		while (<PLUG>) {
		    chomp;
		    if (m/^yes$/ or m/^no(\s+.*)?$/) {
			# Some recognized response
			print "# Got yes/no: $_\n" if $config->{DEBUG};
			push(@pr,$_);
		    } elsif (m/^#/) {
			# Likely debug output from munin-run
			print "# munin-run says: $_\n" if $config->{DEBUG};
		    } else {
			# Something else
			push(@errors,"Got from $plug: $_");
			print "# Got junk: $_\n" if $config->{DEBUG};
			$gotjunk=1;
		    }
		}

		$ps->{$plug}->{'defaultreason'}=join(' ',@pr);

		# Do we have a yes?
		if ($ps->{$plug}->{'defaultreason'} =~ m/yes/) {
		    $ps->{$plug}->{'default'} = "yes"
		} else {
		    $ps->{$plug}->{'default'} = "no"
		}
	    }
	    close (PLUG);
	    my $pluges   = $?;
	    my $plugexit = $?>>8;
	    my $plugsig  = $? & 127;

	    # Override to no if there were errors.
	    if ($pluges and !$config->{exit_not_error}) {
		push(@errors,
		     "Non-zero exit value from $plug: $plugexit/$plugsig");
		print "# Non-zero exit value from $plug: $plugexit/$plugsig\n"
		  if $config->{DEBUG};
	    }
	    if ($? or $gotjunk) {
		$ps->{$plug}->{'default'} = "no";
	    }
	    print "# ",$ps->{$plug}->{'default'} if $config->{DEBUG};
	}

	if ($ps->{$plug}->{'capability'}->{'suggest'}) {

	    my @sugg = ();

	    if (exists $ps->{$plug}->{'default'} and
		$ps->{$plug}->{'default'} eq "yes") {

		my @cmd=("$bindir/munin-run");
		# Debug here breaks stuff.
		# push(@cmd,$debugopt) if $config->{DEBUG};
		push(@cmd,"--servicedir",$config->{libdir}, $plug, "suggest");

		print "\n# Running: ",join(' ',@cmd),"\n" if $config->{DEBUG};

		my $fork = open (PLUG, "-|");

		if ($fork == -1) {
		    die "ERROR: Unable to fork: $!\n"
		} elsif ($fork == 0) { # Child
		    # We would redirect stderr, but with suggest
		    # it's hard to sort errors from the suggestions
		    # as we have no idea what the suggestions might
		    # be.
		    exec (@cmd);
		} else {
		    # Fragile loop, blah blah (se above)


		    while (<PLUG>) {
			chomp;
			if (m/^#/) {
			    # debug output from munin-run
			    print "# Got junk: $_\n" if $config->{DEBUG};
			} else {
			    # This ought to be a suggestion.
			    print "# Got suggestion: $_\n" if $config->{DEBUG};
			    push(@sugg,$_);
			}
		    }
		}
		close (PLUG);
		if ($?) {
		    @sugg = ();
		    print "# Plugin exit code: $? - voiding suggestions\n"
			if $config->{DEBUG};
		}

		@{$ps->{$plug}->{'suggest'}} = @sugg;

		if ($config->{DEBUG}) {
		    print "# Suggested: ",
		      join (' ', @{$ps->{$plug}->{'suggest'}}),"\n";

		    print "# ERROR: empty suggest from $plug\n"
			if !@sugg;
		}

		push(@errors,"ERROR: empty suggest from $plug")
		    unless @sugg;
	    }
	}
	print "\n" if $config->{DEBUG};
    }
    return $ps;
}

1;

=head1 NAME

munin-node-configure - A program to view configurations for munin-node

=head1 SYNOPSIS

munin-node-configure [options]

=head1 OPTIONS

=over 5

=item B<< --help >>

View this help page

=item B<< --version >>

Show version information

=item B<< --debug >>

Print debug information (very verbose).  All debugging output is
printed on STDOUT but each line is prefixed with '#'.  Only errors are
printed on STDERR.

=item B<< --config <file> >>

Override configuration file [@@CONFDIR@@/client.conf]

=item B<< --servicedir <dir> >>

Override plugin dir [@@CONFDIR@@/plugins/]

=item B<< --libdir <dir> >>

Override plugin lib [@@LIBDIR@@/plugins]

=item B<< --families <family,...> >>

Override families [auto]

=item B<< --suggest >>

Show suggestions instead of status

=item B<< --shell >>

Show shell commands (implies --suggest)

=item B<< --remove-also >>

Also show rm-commands when doing --shell

=item B<< --snmp <host|cidr,...> >>

Do SNMP probing on the host or CIDR network (e.g. "192.168.1.0/24"). This
may take some time, especially if the probe includes many hosts. This option
can be specified multiple times, or once with a comma-separated list, to
include more than one host/CIDR.

=item B<< --snmpversion <ver> >>

Set the SNMP version (1, 2c or 3) to use when probing. Default is "2c".

=item B<< --snmpcommunity <comm> >>

Set SNMP community to use when probing. Default is "public".

=back

=head1 DESCRIPTION

Munin's node is a daemon that Munin connects to fetch data. This data is
stored in .rrd-files, and later graphed and htmlified. It's designed to
let it be very easy to graph new datasources.

Munin-node-configure is a script to show the current configuration of which
plugins the host is running, as well as suggestions on what changes to make
to this configuration. Munin-node-configure does this by using munin-run(1) to
ask the plugins themselves of wether they should be run or not.

=head1 FILES

	@@CONFDIR@@/munin-node.conf
	@@CONFDIR@@/plugin-conf.d/*
	@@CONFDIR@@/plugins/*
	@@LIBDIR@@/plugins/*

=head1 VERSION

This is munin-node-configure v@@VERSION@@.

=head1 AUTHORS

Jimmy Olsen, Nicolai Langfeldt

=head1 BUGS

None known.

=head1 COPYRIGHT

Copyright (C) 2003-2006 Jimmy Olsen, Nicolai Langfeldt.

This is free software; see the source for copying conditions. There is
NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.

This program is released under the GNU General Public License

=cut

