# should go upstream
# taken from http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=510307
# which were in turn taken from somewhere...
Index: munin-1.2.6/node/node.d/asterisk_channels.in
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ munin-1.2.6/node/node.d/asterisk_channels.in	2006-03-06 12:06:55.000000000 +0100
@@ -0,0 +1,95 @@
+#!/usr/bin/perl -w
+#
+# Copyright (C) 2005 Rodolphe Quiedeville <rodolphe@quiedeville.org>
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; version 2 dated June,
+# 1991.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+#
+# If you improve this script please send your version to my email address
+# with the copyright notice upgrade with your name.
+#
+#
+# $Log$
+# Revision 1.1  2005/10/22 21:04:01  rodo
+# Created by Rodolphe Quiedeville
+#
+# Parameters mandatory:
+#
+# 	username
+# 	secret
+#
+#%# family=asterisk
+#%# capabilities=autoconf
+
+use strict;
+
+my $ret = undef;
+if (! eval "require Net::Telnet;")
+{
+    $ret = "Net::Telnet not found";
+}
+
+if ($ARGV[0] and $ARGV[0] eq "config")
+{
+    print "graph_title Asterisk active channels\n";
+    print "graph_args --base 1000 -l 0\n";
+    print "graph_vlabel channels\n";
+    print "graph_category asterisk\n";
+    print "channels.draw AREA\n";
+    print "channels.label channels\n";
+    exit 0;
+}
+
+my $host = exists $ENV{'host'} ? $ENV{'host'} : "127.0.0.1";
+my $port = exists $ENV{'port'} ? $ENV{'port'} : "5038";
+
+my $username = $ENV{'username'};
+my $secret   = $ENV{'secret'};
+
+my $pop = new Net::Telnet (Telnetmode => 0);
+$pop->open(Host => $host,
+	   Port => $port);
+
+## Read connection message.
+my $line = $pop->getline;
+die $line unless $line =~ /^Asterisk/;
+
+## Send user name.
+$pop->print("Action: login");
+$pop->print("Username: $username");
+$pop->print("Secret: $secret");
+$pop->print("Events: off");
+$pop->print("");
+
+#Response: Success
+#Message: Authentication accepted
+
+## Request status of messages.
+$pop->print("Action: command");
+$pop->print("Command: show channels");
+$pop->print("");
+my $result;
+while (($line = $pop->getline) and ($line !~ /END COMMAND/o))
+{
+    #print $line;
+    $result = $line if $line =~ /active channel/;
+}
+
+my $nb = (split ' ',$result)[0];
+$pop->print("Action: logoff");
+$pop->print("");
+
+print "channels.value $nb\n";
+
+# vim:syntax=perl
Index: munin-1.2.6/node/node.d/asterisk_channelstypes.in
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ munin-1.2.6/node/node.d/asterisk_channelstypes.in	2006-03-06 12:06:55.000000000 +0100
@@ -0,0 +1,134 @@
+#!/usr/bin/perl -w
+#
+# Copyright (C) 2005-2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; version 2 dated June,
+# 1991.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+#
+# If you improve this script please send your version to my email address
+# with the copyright notice upgrade with your name.
+#
+# Plugin to monitor number of active channels by type, use the 
+# asterisk's manager API to fetch datas.
+#
+# $Log$
+# Revision 1.1  2006/03/06 12:04:01  rodo
+# Created by Rodolphe Quiedeville
+#
+# Parameters mandatory:
+#
+# 	username
+# 	secret
+#
+#%# family=asterisk
+#%# capabilities=autoconf
+
+use strict;
+
+my $ret = undef;
+if (! eval "require Net::Telnet;")
+{
+    $ret = "Net::Telnet not found";
+}
+
+my @CHANNELS = exists $ENV{'channels'} ? split ' ',$ENV{'channels'} : qw(Zap IAX2 SIP);
+
+if ($ARGV[0] and $ARGV[0] eq "config")
+{
+    print "graph_title Asterisk channels\n";
+    print "graph_args --base 1000 -l 0\n";
+    print "graph_vlabel channels\n";
+    print "graph_category asterisk\n";
+    foreach my $channel (@CHANNELS) {
+	if ($channel eq $CHANNELS[0]) {
+	    print "$channel.draw AREA\n";
+	}
+	else{
+	    print "$channel.draw STACK\n";
+	}
+	print "$channel.label $channel\n";
+    }
+    exit 0;
+}
+
+my $host = exists $ENV{'host'} ? $ENV{'host'} : "127.0.0.1";
+my $port = exists $ENV{'port'} ? $ENV{'port'} : "5038";
+
+my $username = $ENV{'username'};
+my $secret   = $ENV{'secret'};
+
+my $pop = new Net::Telnet (Telnetmode => 0);
+$pop->open(Host => $host,
+	   Port => $port);
+
+## Read connection message.
+my $line = $pop->getline;
+die $line unless $line =~ /^Asterisk/;
+
+## Send user name.
+$pop->print("Action: login");
+$pop->print("Username: $username");
+$pop->print("Secret: $secret");
+$pop->print("Events: off");
+$pop->print("");
+
+#Response: Success
+#Message: Authentication accepted
+
+## Request status of messages.
+$pop->print("Action: command");
+$pop->print("Command: show channels");
+$pop->print("");
+
+#Response: Follows
+#Channel              Location             State   Application(Data)
+#Zap/pseudo-198641660 s@frompstn:1         Rsrvd   (None)
+#Zap/1-1              4@frompstn:1         Up      MeetMe(5500)
+#2 active channels
+#1 active call
+#--END COMMAND--
+
+my @results;
+my ($i, $start)=(0,0);
+foreach my $channel (@CHANNELS) {
+    $results[$i] = 0;
+    $i++;
+}
+
+my @fields;
+while (($line = $pop->getline) and ($line !~ /active channels/o))
+{
+    $i = 0;
+    if ($start) {
+	@fields = (split '/', $line);
+	foreach my $channel (@CHANNELS) {
+	    $results[$i] = $results[$i] + 1 if ($fields[0] eq $channel);
+	    $i++;
+	}
+    }
+    $start = 1 if ($line =~ /Channel/o);
+}
+
+
+# Logoff
+$pop->print("Action: logoff");
+$pop->print("");
+
+$i = 0;
+foreach my $channel (@CHANNELS) {
+    print "$channel.value $results[$i]\n";
+    $i++;
+}
+
+# vim:syntax=perl
Index: munin-1.2.6/node/node.d/asterisk_codecs.in
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ munin-1.2.6/node/node.d/asterisk_codecs.in	2008-04-15 18:03:07.000000000 +0200
@@ -0,0 +1,196 @@
+#!/usr/bin/perl -w
+#
+# Copyright (C) 2005-2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; version 2 dated June,
+# 1991.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+#
+# If you improve this script please send your version to my email address
+# with the copyright notice upgrade with your name.
+#
+# Plugin to monitor number of active channels by codec used, use the 
+# asterisk's manager API to fecth datas.
+#
+# $Log$
+# Revision 1.1  2005/10/28 21:04:01  rodo
+# Created by Rodolphe Quiedeville
+#
+# Parameters mandatory:
+#
+# 	username
+# 	secret
+#
+# Optional parameters:
+#       codecs
+#       codecsx
+# note that, if present, both required with codecsX being
+# the hex representation asterisk returns for the codec
+#
+#%# family=asterisk
+#%# capabilities=autoconf
+
+use strict;
+
+my $ret = undef;
+if (! eval "require Net::Telnet;")
+{
+    $ret = "Net::Telnet not found";
+}
+
+my @CODECS = exists $ENV{'codecs'} ? split ' ',$ENV{'codecs'} : qw(gsm ulaw alaw);
+my @CODECSX = exists $ENV{'codecsx'} ? split ' ',$ENV{'codecsx'} : qw(0x2 0x4 0x8);
+
+if ($ARGV[0] and $ARGV[0] eq "config")
+{
+    print "graph_title Asterisk channels/codecs\n";
+    print "graph_args --base 1000 -l 0\n";
+    print "graph_vlabel channels\n";
+    print "graph_category asterisk\n";
+    foreach my $codec (@CODECS) {
+	if ($codec eq $CODECS[0]) {
+	    print "$codec.draw AREA\n";
+	}
+	else{
+	    print "$codec.draw STACK\n";
+	}
+	print "$codec.label $codec\n";
+    }
+    print "other.draw STACK\n";
+    print "other.label other\n";
+    print "unknown.draw STACK\n";
+    print "unknown.label not set\n";
+    exit 0;
+}
+
+my $host = exists $ENV{'host'} ? $ENV{'host'} : "127.0.0.1";
+my $port = exists $ENV{'port'} ? $ENV{'port'} : "5038";
+
+my $username = $ENV{'username'};
+my $secret   = $ENV{'secret'};
+
+my $pop = new Net::Telnet (Telnetmode => 0);
+$pop->open(Host => $host,
+	   Port => $port);
+
+## Read connection message.
+my $line = $pop->getline;
+die $line unless $line =~ /^Asterisk/;
+
+## Send user name.
+$pop->print("Action: login");
+$pop->print("Username: $username");
+$pop->print("Secret: $secret");
+$pop->print("Events: off");
+$pop->print("");
+
+#Response: Success
+#Message: Authentication accepted
+
+## Request status of messages.
+$pop->print("Action: command");
+$pop->print("Command: sip show channels");
+$pop->print("");
+
+#Response: Follows
+#Peer             User/ANR    Call ID      Seq (Tx/Rx)   Format
+#192.168.1.135    yann        6902112b3e0  00101/00002   g729
+#1 active SIP channel(s)
+#--END COMMAND--
+
+my @results;
+my ($i, $start, $unknown, $other)=(0,0,0,0);
+foreach my $codec (@CODECS) {
+    $results[$i] = 0;
+    $i++;
+}
+
+my @fields;
+while (($line = $pop->getline) and ($line !~ /active SIP channel/o))
+{
+    #print STDERR "SIP: $line\n";
+    $i = 0;
+    my $found = 0;
+    if ($start) {
+	@fields = (split ' ', $line);
+        if ($fields[4] eq '0x0') {
+            $unknown += 1;
+            next;
+        }
+	foreach my $codec (@CODECSX) {
+	    if ($fields[4] eq "$codec") {
+		$results[$i] = $results[$i] + 1;
+		$found = 1;
+		last;
+	    }
+	    $i++;
+	}
+	if (! $found) {
+            $other += 1;
+	    print STDERR "CODEC: SIP other format $fields[4]\n";
+	}
+    }
+    $start = 1 if ($line =~ /Peer/o);
+}
+
+## Request status of messages.
+$pop->print("Action: command");
+$pop->print("Command: iax2 show channels");
+$pop->print("");
+
+#Response: Follows
+#Channel               Peer             Username    ID (Lo/Rem)  Seq (Tx/Rx)  Lag      Jitter  JitBuf  Format
+#IAX2/rodolphe@rodolp  10.8.53.6        rodolphe    00003/01287  00006/00004  00000ms  0148ms  0000ms  gsm
+#1 active IAX channel(s)
+#--END COMMAND--
+
+$start = 0;
+while (($line = $pop->getline) and ($line !~ /active IAX channel/o))
+{
+    $i = 0;
+    my $found = 0;
+    if ($start) {
+	@fields = (split ' ', $line);
+        if ($fields[8] eq '0x0') {
+            $unknown += 1;
+            next;
+        }
+	foreach my $codec (@CODECSX) {
+	    if ($fields[8] eq "$codec") {
+		$results[$i] = $results[$i] + 1;
+		$found = 1;
+		last;
+	    }
+	    $i++;
+	}
+        if (! $found) {
+            $other += 1;
+            print STDERR "CODEC: IAX2 other format: $fields[8]\n";
+        }
+    }
+    $start = 1 if ($line =~ /Channel/o);
+}
+
+# Logoff
+$pop->print("Action: logoff");
+$pop->print("");
+
+$i = 0;
+foreach my $codec (@CODECS) {
+    print "$codec.value $results[$i]\n";
+    $i++;
+}
+print "other.value $other\n";
+print "unknown.value $unknown\n";
+
+# vim:syntax=perl
Index: munin-1.2.6/node/node.d/asterisk_meetme.in
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ munin-1.2.6/node/node.d/asterisk_meetme.in	2006-03-06 12:06:55.000000000 +0100
@@ -0,0 +1,109 @@
+#!/usr/bin/perl -w
+#
+# Copyright (C) 2005 Rodolphe Quiedeville <rodolphe@quiedeville.org>
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; version 2 dated June,
+# 1991.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+#
+# If you improve this script please send your version to my email address
+# with the copyright notice upgrade with your name.
+#
+# Plugin to monitor number of active conferences, use the asterisk's manager
+# API to fecth datas.
+#
+# $Log$
+# Revision 1.1  2005/10/22 21:04:01  rodo
+# Created by Rodolphe Quiedeville
+#
+# Parameters mandatory:
+#
+# 	username
+# 	secret
+#
+#%# family=asterisk
+#%# capabilities=autoconf
+
+use strict;
+
+my $ret = undef;
+if (! eval "require Net::Telnet;")
+{
+    $ret = "Net::Telnet not found";
+}
+
+if ($ARGV[0] and $ARGV[0] eq "config")
+{
+    print "graph_title Asterisk actives conferences\n";
+    print "graph_args --base 1000 -l 0\n";
+    print "graph_vlabel conferences\n";
+    print "graph_category asterisk\n";
+    print "confs.draw AREA\n";
+    print "confs.label conferences\n";
+    exit 0;
+}
+
+my $host = exists $ENV{'host'} ? $ENV{'host'} : "127.0.0.1";
+my $port = exists $ENV{'port'} ? $ENV{'port'} : "5038";
+
+my $username = $ENV{'username'};
+my $secret   = $ENV{'secret'};
+
+my $pop = new Net::Telnet (Telnetmode => 0);
+$pop->open(Host => $host,
+	   Port => $port);
+
+## Read connection message.
+my $line = $pop->getline;
+die $line unless $line =~ /^Asterisk/;
+
+## Send user name.
+$pop->print("Action: login");
+$pop->print("Username: $username");
+$pop->print("Secret: $secret");
+$pop->print("Events: off");
+$pop->print("");
+
+#Response: Success
+#Message: Authentication accepted
+
+## Request status of messages.
+$pop->print("Action: command");
+$pop->print("Command: meetme");
+$pop->print("");
+
+
+#Response: Follows
+#Conf Num       Parties        Marked     Activity  Creation
+#5500           0001           N/A        00:00:03  Static
+#* Total number of MeetMe users: 1
+#--END COMMAND--
+
+my ($confs, $start)=(0,0);
+
+while (($line = $pop->getline) and ($line !~ /Total number|No active MeetMe/o))
+{
+    if ($start) {
+        #print $line;
+	$confs++;
+    }
+
+    $start = 1 if ($line =~ /Conf\sNum\s*Parties/o);
+}
+
+$pop->print("Action: logoff");
+$pop->print("");
+
+print "confs.value $confs\n";
+
+# vim:syntax=perl
Index: munin-1.2.6/node/node.d/asterisk_meetmeusers.in
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ munin-1.2.6/node/node.d/asterisk_meetmeusers.in	2008-04-11 20:57:15.000000000 +0200
@@ -0,0 +1,104 @@
+#!/usr/bin/perl -w
+#
+# Copyright (C) 2005 Rodolphe Quiedeville <rodolphe@quiedeville.org>
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; version 2 dated June,
+# 1991.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+#
+# If you improve this script please send your version to my email address
+# with the copyright notice upgrade with your name.
+#
+# Plugin to monitor number of active users in all the conferences, use the 
+# asterisk's manager API to fecth datas.
+#
+# $Log$
+# Revision 1.1  2005/10/22 24:04:01  rodo
+# Created by Rodolphe Quiedeville
+#
+# Parameters mandatory:
+#
+# 	username
+# 	secret
+#
+#%# family=asterisk
+#%# capabilities=autoconf
+
+use strict;
+
+my $ret = undef;
+if (! eval "require Net::Telnet;")
+{
+    $ret = "Net::Telnet not found";
+}
+
+if ($ARGV[0] and $ARGV[0] eq "config")
+{
+    print "graph_title Asterisk conference's users\n";
+    print "graph_args --base 1000 -l 0\n";
+    print "graph_category asterisk\n";
+    print "graph_vlabel users\n";
+    print "users.draw AREA\n";
+    print "users.label users\n";
+    print "users.info users on active conference\n";
+    exit 0;
+}
+
+my $host = exists $ENV{'host'} ? $ENV{'host'} : "127.0.0.1";
+my $port = exists $ENV{'port'} ? $ENV{'port'} : "5038";
+
+my $username = $ENV{'username'};
+my $secret   = $ENV{'secret'};
+
+my $pop = new Net::Telnet (Telnetmode => 0);
+$pop->open(Host => $host,
+	   Port => $port);
+
+## Read connection message.
+my $line = $pop->getline;
+die $line unless $line =~ /^Asterisk/;
+
+## Send user name.
+$pop->print("Action: login");
+$pop->print("Username: $username");
+$pop->print("Secret: $secret");
+$pop->print("Events: off");
+$pop->print("");
+
+#Response: Success
+#Message: Authentication accepted
+
+## Request status of messages.
+$pop->print("Action: command");
+$pop->print("Command: meetme");
+$pop->print("");
+
+my $nb = 0;
+
+#Response: Follows
+#Privilege: Command
+#No active MeetMe conferences.
+# OR
+#Total number of MeetMe users: 1
+
+while (($line = $pop->getline) and ($line !~ /END COMMAND/o))
+{
+    $nb = $1 if $line =~ /MeetMe users:\s(\d)$/;
+}
+
+$pop->print("Action: logoff");
+$pop->print("");
+
+print "users.value $nb\n";
+
+# vim:syntax=perl
Index: munin-1.2.6/node/node.d/asterisk_sipchannels.in
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ munin-1.2.6/node/node.d/asterisk_sipchannels.in	2008-04-15 18:04:15.000000000 +0200
@@ -0,0 +1,167 @@
+#!/usr/bin/perl -w
+#
+# Copyright (C) 2005-2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; version 2 dated June,
+# 1991.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+#
+# If you improve this script please send your version to my email address
+# with the copyright notice upgrade with your name.
+#
+# Plugin to monitor number of SIP active channels by codec used, use the 
+# asterisk's manager API to fecth datas.
+#
+# $Log$
+# Revision 1.3  2006/02/27 12:04:01  rodo
+# Support codec's list definition in config file
+#
+# Revision 1.2  2006/02/26 12:04:01  rodo
+# Support Asterisk 1.2
+#
+# Revision 1.1  2005/10/28 21:04:01  rodo
+# Created by Rodolphe Quiedeville
+#
+# Parameters mandatory:
+#
+# 	username
+# 	secret
+#
+# Optional parameters:
+#       codecs
+#	codecsx
+# note that, if present, both required with codecsX being
+# the hex representation asterisk returns for the codec
+#
+#%# family=asterisk
+#%# capabilities=autoconf
+
+use strict;
+
+my $ret = undef;
+if (! eval "require Net::Telnet;")
+{
+    $ret = "Net::Telnet not found";
+}
+
+#Codecs g723, gsm, ulaw, alaw, g726, adpcm, slin, lpc10, g729, speex, ilbc
+
+my @CODECS = exists $ENV{'codecs'} ? split ' ',$ENV{'codecs'} : qw(gsm ulaw alaw);
+my @CODECSX = exists $ENV{'codecsx'} ? split ' ',$ENV{'codecsx'} : qw(0x2 0x4 0x8);
+
+if ($ARGV[0] and $ARGV[0] eq "config")
+{
+    print "graph_title Asterisk sip channels/codecs\n";
+    print "graph_args --base 1000 -l 0\n";
+    print "graph_vlabel channels\n";
+    print "graph_category asterisk\n";
+    foreach my $codec (@CODECS) {
+	if ($codec eq $CODECS[0]) {
+	    print "$codec.draw AREA\n";
+	}
+	else{
+	    print "$codec.draw STACK\n";
+	}
+	print "$codec.label $codec\n";
+    }
+    print "other.draw STACK\n";
+    print "other.label other\n";
+    print "unknown.draw STACK\n";
+    print "unknown.label not set\n";
+    exit 0;
+}
+
+my $host = exists $ENV{'host'} ? $ENV{'host'} : "127.0.0.1";
+my $port = exists $ENV{'port'} ? $ENV{'port'} : "5038";
+
+my $username = $ENV{'username'};
+my $secret   = $ENV{'secret'};
+
+my $pop = new Net::Telnet (Telnetmode => 0);
+$pop->open(Host => $host,
+	   Port => $port);
+
+## Read connection message.
+my $line = $pop->getline;
+die $line unless $line =~ /^Asterisk/;
+
+## Send user name.
+$pop->print("Action: login");
+$pop->print("Username: $username");
+$pop->print("Secret: $secret");
+$pop->print("Events: off");
+$pop->print("");
+
+## Request status of messages.
+$pop->print("Action: command");
+$pop->print("Command: sip show channels");
+$pop->print("");
+
+#Response: Follows
+#Privilege: Command
+#Peer           User/ANR    Call ID      Seq (Tx/Rx)  Format         Hold   Last Message   
+#0 active SIP channels
+# -- OR --
+#74.218.176.166  (None)    c24a5a230c6  00101/278584006  0x0 (nothing) No    Rx: REGISTER   
+#74.218.176.166  (None)    508c037f936  00101/07310  0x0 (nothing)    No     Rx: REGISTER   
+#2 active SIP channels
+#--END COMMAND--
+
+
+my @results;
+my ($i, $start, $unknown, $other, $fields)=(0,0,0,0,0);
+foreach my $codec (@CODECS) {
+    $results[$i] = 0;
+    $i++;
+}
+
+while (($line = $pop->getline) and ($line !~ /active SIP channel/o))
+{
+    $i = 0;
+    if ($start) {
+	my @fields = (split ' ', $line);
+	if ($fields[4] eq '0x0') {
+	    $unknown += 1;
+	    next;
+	}
+	my $found = 0;
+	foreach my $codec (@CODECSX) {
+	    if ($fields[4] eq "$codec") {
+		$results[$i] = $results[$i] + 1;
+		$found = 1;
+		last;
+	    }
+	    $i++;
+	}
+	if (! $found) {
+	    $other += 1;
+	    print STDERR "SIP other format: $fields[4]\n";
+	}
+    }
+    $start = 1 if ($line =~ /Peer/o);
+}
+
+$pop->print("Action: logoff");
+$pop->print("");
+
+$i = 0;
+foreach my $codec (@CODECS) {
+    print "$codec.value $results[$i]\n";
+    $i++;
+}
+print "other.value $other\n";
+print "unknown.value $unknown\n";
+#print STDERR "asterisk_codecs other.value $other\n";
+#print STDERR "asterisk_codecs unknown.value $unknown\n";
+
+# vim:syntax=perl
Index: munin-1.2.6/node/node.d/asterisk_sippeers.in
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ munin-1.2.6/node/node.d/asterisk_sippeers.in	2008-04-11 18:09:09.000000000 +0200
@@ -0,0 +1,136 @@
+#!/usr/bin/perl -w
+#
+# Copyright (C) 2005 Rodolphe Quiedeville <rodolphe@quiedeville.org>
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; version 2 dated June,
+# 1991.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+#
+# If you improve this script please send your version to my email address
+# with the copyright notice upgrade with your name.
+#
+# Plugin to monitor number of sip peers registered, use the asterisk's manager
+# API to fecth datas.
+#
+# $Log$
+# Revision 1.1  2005/10/28 16:42:01  rodo
+# Created by Rodolphe Quiedeville
+#
+# Parameters mandatory:
+#
+# 	username
+# 	secret
+#
+#%# family=asterisk
+#%# capabilities=autoconf
+
+# #################################################################################
+# Following example from current asterisk 1.4
+#> sip show peers
+#Name/username              Host            Dyn Nat ACL Port     Status               
+#104-RANDALLBUILT/104-RAND  74.218.176.166   D          5060     Unmonitored           
+#...           
+#102-ROCKSOLID/102-ROCKSOL  (Unspecified)    D          0        Unmonitored           
+#101-ROCKSOLID/101-ROCKSOL  (Unspecified)    D   N      0        UNKNOWN              
+#20 sip peers [Monitored: 0 online, 1 offline Unmonitored: 2 online, 17 offline]
+# #################################################################################
+
+use strict;
+
+my $ret = undef;
+if (! eval "require Net::Telnet;")
+{
+    $ret = "Net::Telnet not found";
+}
+
+if ($ARGV[0] and $ARGV[0] eq "config")
+{
+    print "graph_title Asterisk sip peers\n";
+    print "graph_args --base 1000 -l 0\n";
+    print "graph_order mon moff umon umoff\n";
+    print "graph_vlabel peers\n";
+    print "graph_category asterisk\n";
+    #print "peers.label total\n";
+    print "mon.draw AREA\n";
+    print "mon.label monitored online\n";
+    print "moff.draw STACK\n";
+    print "moff.label monitored offline\n";
+    print "umon.draw STACK\n";
+    print "umon.label unmonitored online\n";
+    print "umoff.draw STACK\n";
+    print "umoff.label unmonitored offline\n";
+    #graph_scale no
+    #load.warning 10
+    #load.critical 120
+    #graph_info The ... describes ....
+    #load.info Average load for the five minutes.
+    exit 0;
+}
+
+my $host = exists $ENV{'host'} ? $ENV{'host'} : "127.0.0.1";
+my $port = exists $ENV{'port'} ? $ENV{'port'} : "5038";
+
+my $username = $ENV{'username'};
+my $secret   = $ENV{'secret'};
+
+my $pop = new Net::Telnet (Telnetmode => 0);
+$pop->open(Host => $host,
+	   Port => $port);
+
+## Read connection message.
+my $line = $pop->getline;
+die $line unless $line =~ /^Asterisk/;
+
+## Send user name.
+$pop->print("Action: login");
+$pop->print("Username: $username");
+$pop->print("Secret: $secret");
+$pop->print("Events: off");
+$pop->print("");
+
+#Response: Success
+#Message: Authentication accepted
+
+## Request status of messages.
+$pop->print("Action: command");
+$pop->print("Command: sip show peers");
+$pop->print("");
+
+my ($peers,$monitor_online,$monitor_offline,$unmonitor_online,$unmonitor_offline)=(0,0,0,0,0);
+
+while (($line = $pop->getline) and ($line !~ /END COMMAND/o))
+{
+    my @fields = split(' ', $line);
+    my $count = @fields;
+    #20 sip peers [Monitored: 0 online, 1 offline Unmonitored: 2 online, 17 offline]
+    if (($count > 10) and ($fields[1] eq 'sip' and $fields[2] eq 'peers')) {
+	$peers = $fields[0];
+	$monitor_online = $fields[4];
+	$monitor_offline = $fields[6];
+	$unmonitor_online = $fields[9];
+	$unmonitor_offline = $fields[11];
+	#print STDERR "$peers $monitor_online $monitor_offline $unmonitor_online $unmonitor_offline\n";
+	last;
+    }
+}
+
+$pop->print("Action: logoff");
+$pop->print("");
+
+#print "peers.value $peers\n";
+print "mon.value $monitor_online\n";
+print "moff.value $monitor_offline\n";
+print "umon.value $unmonitor_online\n";
+print "umoff.value $unmonitor_offline\n";
+
+# vim:syntax=perl
Index: munin-1.2.6/node/node.d/asterisk_voicemail.in
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ munin-1.2.6/node/node.d/asterisk_voicemail.in	2006-03-06 12:06:55.000000000 +0100
@@ -0,0 +1,106 @@
+#!/usr/bin/perl -w
+#
+# Copyright (C) 2005-2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; version 2 dated June,
+# 1991.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+#
+# If you improve this script please send your version to my email address
+# with the copyright notice upgrade with your name.
+#
+# Plugin to monitor number of messages in all voicemails
+#
+# $Log$
+# Revision 1.1  2006/03/05 15:07:01  rodo
+# Created by Rodolphe Quiedeville
+#
+# Parameters mandatory:
+#
+# 	username
+# 	secret
+#
+#%# family=asterisk
+#%# capabilities=autoconf
+
+use strict;
+
+my $ret = undef;
+if (! eval "require Net::Telnet;")
+{
+    $ret = "Net::Telnet not found";
+}
+
+if ($ARGV[0] and $ARGV[0] eq "config")
+{
+    print "graph_title Asterisk Voicemail messages\n";
+    print "graph_args --base 1000 -l 0\n";
+    print "graph_vlabel messages\n";
+    print "graph_category asterisk\n";
+    print "messages.draw AREA\n";
+    print "messages.label messages\n";
+    exit 0;
+}
+
+my $host = exists $ENV{'host'} ? $ENV{'host'} : "127.0.0.1";
+my $port = exists $ENV{'port'} ? $ENV{'port'} : "5038";
+
+my $username = $ENV{'username'};
+my $secret   = $ENV{'secret'};
+
+my $pop = new Net::Telnet (Telnetmode => 0);
+$pop->open(Host => $host,
+	   Port => $port);
+
+## Read connection message.
+my $line = $pop->getline;
+die $line unless $line =~ /^Asterisk/;
+
+## Send user name.
+$pop->print("Action: login");
+$pop->print("Username: $username");
+$pop->print("Secret: $secret");
+$pop->print("Events: off");
+$pop->print("");
+
+#Response: Success
+#Message: Authentication accepted
+
+## Request status of messages.
+$pop->print("Action: command");
+$pop->print("Command: show voicemail users");
+$pop->print("");
+
+#Context    Mbox  User                      Zone       NewMsg
+#default    1234  Example Mailbox                           1
+#other      1234  Company2 User                             0
+
+my ($results,$start)=(0,0);
+
+my @fields;
+while (($line = $pop->getline)  and ($line !~ /--END/o))
+{
+    if ($start) {
+	@fields = (split ' ', $line);	
+	$results = $results + pop(@fields);
+    }
+
+    $start = 1 if ($line =~ /Context/o);
+}
+
+# Logoff
+$pop->print("Action: logoff");
+$pop->print("");
+
+print "messages.value $results\n";
+# vim:syntax=perl
