#!@@PERL@@
# -*- perl -*-
#
# Copyright (C) 2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# $Id$
#
# Magic markers (used by munin-node-configure and some installation scripts):
#%# family=auto
#%# capabilities=autoconf

use strict;
use warnings;

use Munin::Plugin;

my @logs = qw/update graph html limits/;
my $logdir = ($ENV{'logdir'} || $ENV{'MUNIN_LOGDIR'} || '@@LOGDIR@@');

if ($ARGV[0] and $ARGV[0] eq 'autoconf') {
    foreach my $log (@logs) {
        my $update = "$logdir/munin-$log.log";
        unless ( -r $update) {
            print "no (Can't read $update)\n";
            exit 0;
        }
    }
    print "yes";
    exit 0;
}

if ($ARGV[0] and $ARGV[0] eq "config") {
    print "graph_title Munin processing time\n",
          "graph_args --base 1000 -l 0\n",
          "graph_scale yes\n",
          "graph_vlabel seconds\n",
          "graph_category munin\n";
    foreach my $log (@logs) {
        print("$log.label munin $log\n");
        print("$log.draw AREASTACK\n");
    }
    exit 0;
}


my %positions = restore_state();
my %times;

foreach my $log (@logs) {
    my $logfile = "$logdir/munin-$log.log";
    my $time = 'U';

    if (exists $positions{$log}) {
        my ($LOGFILE, undef) = tail_open($logfile, $positions{$log});
        while (<$LOGFILE>) {
                $time = $1 if (/finished \((\d+\.\d+)\ssec\)$/);
        }
        $positions{$log} = tail_close($LOGFILE);
    }
    else {
        # Do nothing on first run except find the current file end.
        $positions{$log} = (stat $logfile)[7];
    }

    print "$log.value $time\n";
}

save_state(%positions);

# vim: ft=perl : ts=4 : expandtab
