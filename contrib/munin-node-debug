#! /usr/bin/perl
# Munin node that presents as many virtual hosts, plugins & fields 
# as needed to be able to : 
# - emulate a HUGE network to stress the munin-master server
# - serve as a basis for protocol debugging 
#
# Copyright (C) 2010 Steve Schnepp under the GPLv2

use strict;
use warnings;

use IO::Socket;
use IO::Select;
use Getopt::Long;

my $nb_servers = 3;
my $nb_plugins = 30;
my $fields_per_plugin = 5;
my $starting_port = 24949;
my $dump_config;
my $is_debug;
my $help;

my $arg_ret = GetOptions(
	"nb-plugins|n=i" => \$nb_plugins,
	"nb-fields|f=i" => \$fields_per_plugin,
	"nb-servers|s=i" => \$nb_servers,

	"startint-port|p=i" => \$starting_port,
	
	"dump-conf|d" => \$dump_config,
	"help|h" => \$help,
	"debug" => \$is_debug,
);

if ($help) {
	print qq{Usage: $0 [options]

Options:
    --help                   View this message.

    -n --nb-plugins <int>     Number of plugins per server [30] 
    -f --nb-fields  <int>     Number of fields per plugins [5]
    -s --nb-servers <int>     Number of servers [3]

    -p --start-port <int>     Starting TCP listening port [24949]

    -d --dump                 Only dump a generated munin.conf part [no]
       --debug                Print debug informations [no] 

};
	exit 0;
}

if ($dump_config) {
	for (my $i = 0; $i < $nb_servers; $i++) {
		my $port = $starting_port + $i;
		print "[host$port.debug]\n";
		print "     address 127.0.0.1:$port\n";
		print "\n";
	}
	
	# Only dump config
	exit;
}

# start the servers
my @servers;
for (my $i = 0; $i < $nb_servers; $i ++) {
	my $port = $starting_port + $i;
	debug("starting server on port $port");
	my $server = IO::Socket::INET->new(
		"LocalPort" => $port,
		"LocalAddr" => "localhost",
		"Listen" => 5,
		"ReuseAddr" => 1,
		"Proto" => "tcp",
	) or croak($!);

	push @servers, $server;
}

# Ignoring SIG_CHILD
debug("Ignoring SIG_CHILD");
$SIG{CHLD} = 'IGNORE';

my $select = IO::Select->new(@servers);
while (my @ready = $select->can_read()) {
	foreach my $ready_fh (@ready) {
		my $client = $ready_fh->accept();
		if (! fork()) {
			debug("[$$] Serving new client");
			service($client);
			# Exit the child
			debug("[$$] Finished");
			exit;
		}
	}
}

sub service
{
	my $client = shift;
	my $hostname = "host".$client->sockport().".debug";

	print $client "# munin node at $hostname\n";

	while (my $line = <$client>) {
		chomp($line);
		debug("[$$] client of $hostname asked : $line");
		if ($line =~ m/^list/) {
			for (my $i = 0; $i < $nb_plugins; $i ++) {
				print $client "debug_plugin_$i ";
			}
			print $client "\n";
			print $client ".\n";
		} elsif ($line =~ m/^config (\w+)/) {
			my $plugin_number = get_plugin_number($1);
			print $client "graph_title Debug plugin $plugin_number\n";
			for (my $i = 0; $i < $fields_per_plugin; $i ++) {
				print $client "field_". $plugin_number . "_$i.label field $i of plugin $1 on $hostname\n";
				print $client "field_". $plugin_number . "_$i.type GAUGE\n";
			}
			print $client ".\n";
		} elsif ($line =~ m/^fetch (\w+)/) {
			my $plugin_number = get_plugin_number($1);
			for (my $i = 0; $i < $fields_per_plugin; $i ++) {
				my $value = sin( (time / 3600) * $plugin_number + $i);
				print $client "field_$1_$i.value $value\n";
				print $client "field_$1_$i.type GAUGE\n";
			}
			print $client ".\n";
		} elsif ($line =~ m/^quit/) {
			return;
		} else {
			print $client "# Command not found\n";
		}
	}
}

sub get_plugin_number 
{
	my $plugin_name = shift;
	my $plugin_number = $1 if ($plugin_name =~ m/(\d+)/);
	return $plugin_number;
}

sub debug 
{
	print join(" ", @_) . "\n" if $is_debug; 
}

__END__

